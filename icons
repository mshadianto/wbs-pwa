<!DOCTYPE html>
<html>
<head>
    <title>WBS PWA Icon Generator</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f0f0f0;
            padding: 20px;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }
        h1 {
            color: #667eea;
            text-align: center;
        }
        .icon-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        .icon-container {
            text-align: center;
        }
        canvas {
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            margin-bottom: 10px;
        }
        .download-btn {
            display: inline-block;
            padding: 8px 15px;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 12px;
            border: none;
            cursor: pointer;
        }
        .download-btn:hover {
            background: #5a67d8;
        }
        .download-all {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            margin: 20px 0;
        }
        .instructions {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .instructions h3 {
            color: #333;
            margin-top: 0;
        }
        .instructions ol {
            margin: 10px 0;
            padding-left: 20px;
        }
        .instructions li {
            margin: 5px 0;
        }
        .color-picker {
            margin: 20px 0;
            text-align: center;
        }
        .color-picker input {
            margin: 0 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üõ°Ô∏è WBS PWA Icon Generator</h1>
        
        <div class="instructions">
            <h3>üì± How to Use:</h3>
            <ol>
                <li>Icons will be automatically generated below</li>
                <li>Click "Download" under each icon to save individually</li>
                <li>Or click "Download All Icons as ZIP" for all sizes</li>
                <li>Create an "icons" folder in your project</li>
                <li>Place all downloaded icons in the folder</li>
            </ol>
        </div>
        
        <div class="color-picker">
            <label>Background Color: <input type="color" id="bgColor" value="#667eea"></label>
            <label>Icon Color: <input type="color" id="iconColor" value="#ffffff"></label>
            <button onclick="regenerateIcons()">Regenerate Icons</button>
        </div>
        
        <div class="icon-grid" id="iconGrid"></div>
        
        <button class="download-all" onclick="downloadAllIcons()">üì¶ Download All Icons as ZIP</button>
        
        <div class="instructions">
            <h3>üìù File Structure:</h3>
            <pre>
your-project/
‚îú‚îÄ‚îÄ index.html (PWA HTML file)
‚îú‚îÄ‚îÄ manifest.json
‚îú‚îÄ‚îÄ sw.js (service worker)
‚îî‚îÄ‚îÄ icons/
    ‚îú‚îÄ‚îÄ icon-72.png
    ‚îú‚îÄ‚îÄ icon-96.png
    ‚îú‚îÄ‚îÄ icon-128.png
    ‚îú‚îÄ‚îÄ icon-144.png
    ‚îú‚îÄ‚îÄ icon-152.png
    ‚îú‚îÄ‚îÄ icon-192.png
    ‚îú‚îÄ‚îÄ icon-384.png
    ‚îî‚îÄ‚îÄ icon-512.png
            </pre>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    
    <script>
        const sizes = [72, 96, 128, 144, 152, 192, 384, 512];
        const icons = {};
        
        function createIcon(size) {
            const canvas = document.createElement('canvas');
            canvas.width = size;
            canvas.height = size;
            const ctx = canvas.getContext('2d');
            
            const bgColor = document.getElementById('bgColor').value;
            const iconColor = document.getElementById('iconColor').value;
            
            // Background
            ctx.fillStyle = bgColor;
            ctx.fillRect(0, 0, size, size);
            
            // Gradient overlay
            const gradient = ctx.createLinearGradient(0, 0, size, size);
            gradient.addColorStop(0, 'rgba(255,255,255,0.2)');
            gradient.addColorStop(1, 'rgba(0,0,0,0.2)');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, size, size);
            
            // Shield icon
            ctx.fillStyle = iconColor;
            ctx.strokeStyle = iconColor;
            ctx.lineWidth = size * 0.03;
            
            const centerX = size / 2;
            const centerY = size / 2;
            const shieldSize = size * 0.5;
            
            // Draw shield shape
            ctx.beginPath();
            ctx.moveTo(centerX, centerY - shieldSize * 0.4);
            ctx.quadraticCurveTo(centerX - shieldSize * 0.5, centerY - shieldSize * 0.3, 
                                centerX - shieldSize * 0.5, centerY);
            ctx.quadraticCurveTo(centerX - shieldSize * 0.5, centerY + shieldSize * 0.3,
                                centerX, centerY + shieldSize * 0.5);
            ctx.quadraticCurveTo(centerX + shieldSize * 0.5, centerY + shieldSize * 0.3,
                                centerX + shieldSize * 0.5, centerY);
            ctx.quadraticCurveTo(centerX + shieldSize * 0.5, centerY - shieldSize * 0.3,
                                centerX, centerY - shieldSize * 0.4);
            ctx.closePath();
            ctx.stroke();
            ctx.fill();
            
            // Add checkmark inside shield
            ctx.strokeStyle = bgColor;
            ctx.lineWidth = size * 0.05;
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
            
            ctx.beginPath();
            ctx.moveTo(centerX - shieldSize * 0.2, centerY);
            ctx.lineTo(centerX - shieldSize * 0.05, centerY + shieldSize * 0.15);
            ctx.lineTo(centerX + shieldSize * 0.2, centerY - shieldSize * 0.15);
            ctx.stroke();
            
            // Add text for larger icons
            if (size >= 192) {
                ctx.fillStyle = iconColor;
                ctx.font = `bold ${size * 0.08}px Arial`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText('WBS', centerX, centerY + shieldSize * 0.7);
            }
            
            return canvas;
        }
        
        function generateIcons() {
            const container = document.getElementById('iconGrid');
            container.innerHTML = '';
            
            sizes.forEach(size => {
                const canvas = createIcon(size);
                icons[size] = canvas;
                
                const iconContainer = document.createElement('div');
                iconContainer.className = 'icon-container';
                
                const displayCanvas = document.createElement('canvas');
                displayCanvas.width = 128;
                displayCanvas.height = 128;
                const displayCtx = displayCanvas.getContext('2d');
                displayCtx.imageSmoothingEnabled = true;
                displayCtx.imageSmoothingQuality = 'high';
                displayCtx.drawImage(canvas, 0, 0, 128, 128);
                
                const label = document.createElement('div');
                label.textContent = `${size}x${size}`;
                label.style.marginBottom = '5px';
                
                const downloadBtn = document.createElement('button');
                downloadBtn.className = 'download-btn';
                downloadBtn.textContent = 'Download';
                downloadBtn.onclick = () => downloadIcon(size);
                
                iconContainer.appendChild(label);
                iconContainer.appendChild(displayCanvas);
                iconContainer.appendChild(downloadBtn);
                container.appendChild(iconContainer);
            });
        }
        
        function downloadIcon(size) {
            const canvas = icons[size];
            canvas.toBlob(blob => {
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `icon-${size}.png`;
                a.click();
                URL.revokeObjectURL(url);
            });
        }
        
        async function downloadAllIcons() {
            const zip = new JSZip();
            const iconsFolder = zip.folder('icons');
            
            for (const size of sizes) {
                const canvas = icons[size];
                const blob = await new Promise(resolve => canvas.toBlob(resolve));
                iconsFolder.file(`icon-${size}.png`, blob);
            }
            
            // Add splash screens for iOS
            const splashFolder = zip.folder('splash');
            const splashSizes = [
                { width: 640, height: 1136, name: 'splash-640x1136.png' },
                { width: 750, height: 1334, name: 'splash-750x1334.png' },
                { width: 1242, height: 2208, name: 'splash-1242x2208.png' },
                { width: 1125, height: 2436, name: 'splash-1125x2436.png' }
            ];
            
            for (const splash of splashSizes) {
                const canvas = createSplashScreen(splash.width, splash.height);
                const blob = await new Promise(resolve => canvas.toBlob(resolve));
                splashFolder.file(splash.name, blob);
            }
            
            // Generate and download ZIP
            const content = await zip.generateAsync({ type: 'blob' });
            saveAs(content, 'wbs-pwa-icons.zip');
        }
        
        function createSplashScreen(width, height) {
            const canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            
            // Gradient background
            const gradient = ctx.createLinearGradient(0, 0, width, height);
            gradient.addColorStop(0, '#667eea');
            gradient.addColorStop(1, '#764ba2');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, width, height);
            
            // Logo
            const logoSize = Math.min(width, height) * 0.3;
            const centerX = width / 2;
            const centerY = height / 2;
            
            ctx.fillStyle = 'white';
            ctx.strokeStyle = 'white';
            ctx.lineWidth = logoSize * 0.03;
            
            // Draw shield
            ctx.beginPath();
            ctx.moveTo(centerX, centerY - logoSize * 0.4);
            ctx.quadraticCurveTo(centerX - logoSize * 0.5, centerY - logoSize * 0.3, 
                                centerX - logoSize * 0.5, centerY);
            ctx.quadraticCurveTo(centerX - logoSize * 0.5, centerY + logoSize * 0.3,
                                centerX, centerY + logoSize * 0.5);
            ctx.quadraticCurveTo(centerX + logoSize * 0.5, centerY + logoSize * 0.3,
                                centerX + logoSize * 0.5, centerY);
            ctx.quadraticCurveTo(centerX + logoSize * 0.5, centerY - logoSize * 0.3,
                                centerX, centerY - logoSize * 0.4);
            ctx.closePath();
            ctx.fill();
            
            // Text
            ctx.fillStyle = 'white';
            ctx.font = `bold ${logoSize * 0.15}px Arial`;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText('WBS Mobile', centerX, centerY + logoSize * 0.8);
            
            ctx.font = `${logoSize * 0.08}px Arial`;
            ctx.fillText('Whistleblowing System', centerX, centerY + logoSize * 1);
            
            return canvas;
        }
        
        function regenerateIcons() {
            generateIcons();
        }
        
        // Generate icons on load
        generateIcons();
    </script>
</body>
</html>
